name: CI

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  server:
    name: Server (Rust ${{ matrix.toolchain }}) – fmt • clippy • test
    strategy:
      matrix:
        toolchain: [stable, nightly]
    runs-on: ubuntu-latest
    env:
      CARGO_TERM_COLOR: always
      CARGO_TARGET_DIR: target/${{ matrix.toolchain }}
    defaults:
      run:
        working-directory: m3/server
    steps:
      - uses: actions/checkout@v4
        with:
          path: m3

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/${{ matrix.toolchain }}
          key: ${{ runner.os }}-cargo-${{ matrix.toolchain }}-${{ hashFiles('m3/server/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-${{ matrix.toolchain }}-

      - name: Install Rust ${{ matrix.toolchain }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
          components: rustfmt, clippy

      - name: Show versions
        run: |
          rustc -V
          cargo -V

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Clippy (deny warnings)
        run: cargo clippy -- -D warnings

      - name: Test
        run: cargo test --workspace --all-features --no-fail-fast

      - name: Panic redirect script – smoke test
        working-directory: m3
        run: |
          set -euxo pipefail
          chmod +x ./panic.sh
          # Write logs into repo's server/exports so they persist in workspace
          M3_EXPORTS_DIR="$GITHUB_WORKSPACE/m3/server/exports" ./panic.sh
          # Assert at least one panic log was created
          find server/exports/panic -type f -name '*.log' -print -quit | grep -q .

      - name: Upload panic logs
        if: failure() || always()
        uses: actions/upload-artifact@v4
        with:
          name: server-panic-logs-${{ matrix.toolchain }}-attempt-${{ github.run_attempt }}
          path: m3/server/exports/panic/**/*.log
          if-no-files-found: ignore

  ui:
    name: UI (Node) – fmt • lint • build
    strategy:
      matrix:
        node: [18, 20]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: m3

      - name: Checkout garden-core (workspace sibling)
        uses: actions/checkout@v4
        with:
          repository: gratiaOS/garden-core
          path: garden-core
          fetch-depth: 1

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.18.3
          run_install: false

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'pnpm'
          cache-dependency-path: m3/pnpm-lock.yaml

      - name: Verify pnpm availability (and fallback via Corepack)
        run: |
          set -euxo pipefail
          which pnpm || true
          pnpm -v || true
          # Fallback to Corepack in case the action didn't inject pnpm in PATH
          corepack enable
          corepack prepare pnpm@10.18.3 --activate
          which pnpm
          pnpm -v

      - name: Install workspace deps
        working-directory: m3
        run: pnpm install --frozen-lockfile=false

      - name: Show versions
        run: |
          node -v
          pnpm -v

      - name: Build Garden Icons package
        working-directory: m3
        run: pnpm --filter @garden/icons build

      - name: Build Garden UI package
        working-directory: m3
        run: pnpm --filter @garden/ui build

      - name: Format (workspace)
        working-directory: m3
        run: pnpm fmt

      - name: Lint (workspace)
        working-directory: m3
        run: pnpm lint

      - name: Build UI
        working-directory: m3/ui
        run: pnpm build

      - name: Upload UI dist
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ui-dist-node-${{ matrix.node }}-attempt-${{ github.run_attempt }}
          path: m3/ui/dist
          if-no-files-found: warn

  whisper:
    name: Whisper Guard – commit messages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Verify whispers in commits
        shell: bash
        run: |
          set -euo pipefail

          if [ -f scripts/commit-whisper-check.mjs ]; then
            echo "Checking commit whispers…"
          else
            echo "scripts/commit-whisper-check.mjs not found; skipping." && exit 0
          fi

          if [ "${{ github.event_name }}" = "pull_request" ]; then
            range="${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }}"
            shas=$(git rev-list --no-merges "$range")
          else
            shas=$(git rev-list -n 1 HEAD)
          fi

          if [ -z "$shas" ]; then
            echo "No commits found in range; skipping." && exit 0
          fi

          status=0
          for sha in $shas; do
            git log -1 --pretty=%B "$sha" > .git/commitmsg.txt
            echo "\n— checking $sha —" && head -n 3 .git/commitmsg.txt || true
            node scripts/commit-whisper-check.mjs .git/commitmsg.txt || status=$?
          done

          exit $status
